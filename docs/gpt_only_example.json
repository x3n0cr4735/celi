{"HumanEval/0": {"func": "    if len(numbers) < 2:\n        return False\n    \n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    return False"}, "HumanEval/1": {"func": "    def separate_paren_groups(paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")\n        result = []\n        temp = \"\"\n        balance = 0\n        \n        for char in paren_string:\n            temp += char\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            \n            if balance == 0 and temp:\n                result.append(temp)\n                temp = \"\"\n        \n        return result"}, "HumanEval/2": {"func": "    return number - int(number)"}, "HumanEval/3": {"func": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}, "HumanEval/4": {"func": "    if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / len(numbers)\n    \n    return mad"}, "HumanEval/5": {"func": "    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result"}, "HumanEval/6": {"func": "    def parse_nested_parens(paren_string: str) -> List[int]:\n        if not paren_string:\n            return []\n        \n        groups = paren_string.split()\n        result = []\n        \n        for group in groups:\n            current_depth = 0\n            max_depth = 0\n            \n            for char in group:\n                if char == '(':\n                    current_depth += 1\n                    if current_depth > max_depth:\n                        max_depth = current_depth\n                elif char == ')':\n                    current_depth -= 1\n            \n            result.append(max_depth)\n        \n        return result"}, "HumanEval/7": {"func": "    return [s for s in strings if substring in s]"}, "HumanEval/8": {"func": "    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    \n    return total_sum, total_product"}, "HumanEval/9": {"func": "    result = []\n    if not numbers:\n        return result\n    \n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    \n    return result"}, "HumanEval/10": {"func": "    def make_palindrome(string: str) -> str:\n        def is_palindrome(s: str) -> bool:\n            return s == s[::-1]\n        \n        n = len(string)\n        if n == 0:\n            return string\n        \n        for i in range(n):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n        \n        return string  # This line should never be reached"}, "HumanEval/11": {"func": "    result = []\n    for char_a, char_b in zip(a, b):\n        result.append(str(int(char_a) ^ int(char_b)))\n    return ''.join(result)"}, "HumanEval/12": {"func": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"}, "HumanEval/13": {"func": "    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}, "HumanEval/14": {"func": "    return [string[:i] for i in range(1, len(string) + 1)]"}, "HumanEval/15": {"func": "    return ' '.join(map(str, range(n + 1)))"}, "HumanEval/16": {"func": "    return len(set(string.lower()))"}, "HumanEval/17": {"func": "    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    if not music_string:\n        return []\n    \n    notes = music_string.split()\n    beats = [note_to_beats[note] for note in notes]\n    \n    return beats"}, "HumanEval/18": {"func": "    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    return count"}, "HumanEval/19": {"func": "    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    reverse_map = {v: k for k, v in number_map.items()}\n    \n    if not numbers:\n        return ''\n    \n    number_words = numbers.split()\n    number_values = [number_map[word] for word in number_words]\n    sorted_values = sorted(number_values)\n    sorted_words = [reverse_map[value] for value in sorted_values]\n    \n    return ' '.join(sorted_words)"}, "HumanEval/20": {"func": "    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair"}, "HumanEval/21": {"func": "    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers] if range_val != 0 else [0.0] * len(numbers)"}, "HumanEval/22": {"func": "    return [value for value in values if isinstance(value, int)]"}, "HumanEval/23": {"func": "    return len(string)"}, "HumanEval/24": {"func": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i"}, "HumanEval/25": {"func": "    def factorize(n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while n > 1:\n            while n % divisor == 0:\n                factors.append(divisor)\n                n //= divisor\n            divisor += 1\n        return factors"}, "HumanEval/26": {"func": "    count = {}\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    result = [num for num in numbers if count[num] == 1]\n    \n    return result"}, "HumanEval/27": {"func": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}, "HumanEval/28": {"func": "    return ''.join(strings)"}, "HumanEval/29": {"func": "    return [string for string in strings if string.startswith(prefix)]"}, "HumanEval/30": {"func": "    return [x for x in l if x > 0]"}, "HumanEval/31": {"func": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}, "HumanEval/33": {"func": "    # Step 1: Extract elements at indices divisible by three\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Step 2: Sort these elements\n    divisible_by_three.sort()\n    \n    # Step 3: Place them back in the original list\n    sorted_list = l[:]\n    j = 0\n    for i in range(len(sorted_list)):\n        if i % 3 == 0:\n            sorted_list[i] = divisible_by_three[j]\n            j += 1\n    \n    return sorted_list"}, "HumanEval/34": {"func": "    return sorted(list(set(l)))"}, "HumanEval/35": {"func": "    if not l:\n        raise ValueError(\"The list is empty\")\n    return max(l)"}, "HumanEval/36": {"func": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}, "HumanEval/37": {"func": "    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    \n    result = l[:]\n    for i, value in zip(even_indices, even_values):\n        result[i] = value\n    \n    return result"}, "HumanEval/38": {"func": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}, "HumanEval/39": {"func": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\ndef prime_fib(n: int):\n    fib_gen = fibonacci()\n    count = 0\n    while True:\n        fib_num = next(fib_gen)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num"}, "HumanEval/41": {"func": "    return n"}, "HumanEval/42": {"func": "    return [x + 1 for x in l]"}, "HumanEval/43": {"func": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}, "HumanEval/44": {"func": "    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(digits[::-1])"}, "HumanEval/45": {"func": "    return 0.5 * a * h"}, "HumanEval/46": {"func": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib4_seq = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_value = fib4_seq[-1] + fib4_seq[-2] + fib4_seq[-3] + fib4_seq[-4]\n        fib4_seq.append(next_value)\n\n    return fib4_seq[n]"}, "HumanEval/47": {"func": "    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n    \n    if n % 2 == 1:\n        return l_sorted[mid]\n    else:\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2"}, "HumanEval/48": {"func": "    normalized_text = ''.join(char.lower() for char in text if char.isalnum())\n    return normalized_text == normalized_text[::-1]"}, "HumanEval/49": {"func": "    return pow(2, n, p)"}, "HumanEval/50": {"func": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}, "HumanEval/51": {"func": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}, "HumanEval/52": {"func": "    for num in l:\n        if num >= t:\n            return False\n    return True"}, "HumanEval/53": {"func": "    return x + y"}, "HumanEval/54": {"func": "    return set(s0) == set(s1)"}, "HumanEval/55": {"func": "    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}, "HumanEval/56": {"func": "    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0"}, "HumanEval/57": {"func": "    if len(l) <= 1:\n        return True\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}, "HumanEval/58": {"func": "    def common(l1: list, l2: list):\n        common_elements = set(l1).intersection(set(l2))\n        return sorted(common_elements)"}, "HumanEval/59": {"func": "    # Initialize the largest factor\n    largest_factor = 1\n    \n    # Divide out the factor of 2\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then it is a prime factor\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor"}, "HumanEval/60": {"func": "    return n * (n + 1) // 2"}, "HumanEval/61": {"func": "    counter = 0\n    for char in brackets:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0"}, "HumanEval/62": {"func": "    return [i * xs[i] for i in range(1, len(xs))]"}, "HumanEval/63": {"func": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fibfib_sequence = [0, 0, 1]\n    \n    for i in range(3, n + 1):\n        next_value = fibfib_sequence[-1] + fibfib_sequence[-2] + fibfib_sequence[-3]\n        fibfib_sequence.append(next_value)\n    \n    return fibfib_sequence[n]"}, "HumanEval/64": {"func": "    def vowels_count(s):\n        s = s.lower()\n        vowels = set('aeiou')\n        count = 0\n        for i, char in enumerate(s):\n            if char in vowels:\n                count += 1\n            elif char == 'y' and i == len(s) - 1:\n                count += 1\n        return count"}, "HumanEval/65": {"func": "    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift >= num_digits:\n        return x_str[::-1]\n    \n    shift = shift % num_digits\n    return x_str[-shift:] + x_str[:-shift]"}, "HumanEval/66": {"func": "    def digitSum(s):\n        total = 0\n        for char in s:\n            if char.isupper():\n                total += ord(char)\n        return total"}, "HumanEval/67": {"func": "    import re\n\n    apple_orange_pattern = re.compile(r'(\\d+) apples and (\\d+) oranges')\n    match = apple_orange_pattern.search(s)\n    if match:\n        apples = int(match.group(1))\n        oranges = int(match.group(2))\n        return n - apples - oranges\n    else:\n        raise ValueError(\"Input string is not in the expected format\")"}, "HumanEval/68": {"func": "    smallest_even = None\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n    \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}, "HumanEval/69": {"func": "    from collections import Counter\n    \n    # Count the frequency of each integer in the list\n    freq = Counter(lst)\n    \n    # Initialize the result as -1\n    result = -1\n    \n    # Iterate through the counted frequencies\n    for num, count in freq.items():\n        if count >= num:\n            result = max(result, num)\n    \n    return result"}, "HumanEval/70": {"func": "    if not lst:\n        return []\n    \n    lst.sort()\n    result = []\n    left, right = 0, len(lst) - 1\n    \n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    \n    return result"}, "HumanEval/71": {"func": "    import math\n\n    def triangle_area(a, b, c):\n        # Check if the sides form a valid triangle\n        if a + b <= c or a + c <= b or b + c <= a:\n            return -1\n        \n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        \n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        # Return the area rounded to 2 decimal points\n        return round(area, 2)"}, "HumanEval/72": {"func": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False"}, "HumanEval/73": {"func": "    def smallest_change(arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n // 2):\n            if arr[i] != arr[n - i - 1]:\n                changes += 1\n        return changes"}, "HumanEval/74": {"func": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1"}, "HumanEval/75": {"func": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}, "HumanEval/76": {"func": "    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if n == 0:\n        return x == 0\n    \n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}, "HumanEval/77": {"func": "    cube_root = round(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a) if a >= 0 else -cube_root ** 3 == a"}, "HumanEval/78": {"func": "    def hex_key(num):\n        prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n        count = 0\n        for char in num:\n            if char in prime_hex_digits:\n                count += 1\n        return count"}, "HumanEval/79": {"func": "    binary_representation = bin(decimal)[2:]\n    return f\"db{binary_representation}db\""}, "HumanEval/80": {"func": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}, "HumanEval/81": {"func": "    def numerical_letter_grade(grades):\n        letter_grades = []\n        for gpa in grades:\n            if gpa == 4.0:\n                letter_grades.append('A+')\n            elif gpa > 3.7:\n                letter_grades.append('A')\n            elif gpa > 3.3:\n                letter_grades.append('A-')\n            elif gpa > 3.0:\n                letter_grades.append('B+')\n            elif gpa > 2.7:\n                letter_grades.append('B')\n            elif gpa > 2.3:\n                letter_grades.append('B-')\n            elif gpa > 2.0:\n                letter_grades.append('C+')\n            elif gpa > 1.7:\n                letter_grades.append('C')\n            elif gpa > 1.3:\n                letter_grades.append('C-')\n            elif gpa > 1.0:\n                letter_grades.append('D+')\n            elif gpa > 0.7:\n                letter_grades.append('D')\n            elif gpa > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades"}, "HumanEval/82": {"func": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    length = len(string)\n    return is_prime(length)"}, "HumanEval/83": {"func": "    if n == 1:\n        return 1  # Only the number 1 fits the criteria\n    \n    # Count of numbers starting with 1\n    start_with_1 = 10**(n-1)\n    \n    # Count of numbers ending with 1\n    end_with_1 = 9 * 10**(n-2)\n    \n    # Count of numbers both starting and ending with 1\n    both_start_and_end_with_1 = 1\n    \n    return start_with_1 + end_with_1 - both_start_and_end_with_1"}, "HumanEval/84": {"func": "    digit_sum = sum(int(digit) for digit in str(N))\n    return bin(digit_sum)[2:]"}, "HumanEval/85": {"func": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}, "HumanEval/86": {"func": "    import re\n    parts = re.split(r'(\\s+)', s)\n    sorted_parts = [''.join(sorted(part)) if not part.isspace() else part for part in parts]\n    return ''.join(sorted_parts)"}, "HumanEval/87": {"func": "    coordinates = []\n    \n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates"}, "HumanEval/88": {"func": "    if not array or len(array) == 1:\n        return array\n    \n    sum_first_last = array[0] + array[-1]\n    \n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}, "HumanEval/89": {"func": "    result = []\n    for char in s:\n        new_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        result.append(new_char)\n    return ''.join(result)"}, "HumanEval/90": {"func": "    def next_smallest(lst):\n        if len(lst) < 2:\n            return None\n        \n        unique_elements = list(set(lst))\n        if len(unique_elements) < 2:\n            return None\n        \n        unique_elements.sort()\n        return unique_elements[1]"}, "HumanEval/91": {"func": "    delimiters = '.!?'\n    sentences = []\n    start = 0\n    \n    for i, char in enumerate(S):\n        if char in delimiters:\n            sentences.append(S[start:i].strip())\n            start = i + 1\n    \n    if start < len(S):\n        sentences.append(S[start:].strip())\n    \n    return sum(1 for sentence in sentences if sentence.startswith(\"I\"))"}, "HumanEval/92": {"func": "    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x + y == z or x + z == y or y + z == x"}, "HumanEval/93": {"func": "    def encode(message):\n        vowel_replacement = {\n            'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n            'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n        }\n        \n        # Swap case\n        swapped_message = message.swapcase()\n        \n        # Replace vowels\n        encoded_message = ''.join(vowel_replacement.get(char, char) for char in swapped_message)\n        \n        return encoded_message"}, "HumanEval/94": {"func": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0  # No prime number found\n\n    return sum_of_digits(largest_prime)"}, "HumanEval/95": {"func": "    if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    \n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    all_lower = all(key.islower() for key in keys)\n    all_upper = all(key.isupper() for key in keys)\n    \n    return all_lower or all_upper"}, "HumanEval/96": {"func": "    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    \n    return primes"}, "HumanEval/97": {"func": "    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b"}, "HumanEval/98": {"func": "    count = 0\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}, "HumanEval/99": {"func": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}, "HumanEval/100": {"func": "    stones = []\n    current_stones = n\n    for _ in range(n):\n        stones.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return stones"}, "HumanEval/101": {"func": "    s = s.replace(',', ' ')\n    words = s.split()\n    return words"}, "HumanEval/102": {"func": "    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1"}, "HumanEval/103": {"func": "    if n > m:\n        return -1\n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    avg = total_sum / count\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}, "HumanEval/104": {"func": "    result = []\n    for num in x:\n        if all(digit not in '02468' for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}, "HumanEval/105": {"func": "    # Step 1: Filter the array to include only integers between 1 and 9 inclusive\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Step 2: Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Step 3: Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Step 4: Replace each integer with its corresponding name\n    num_to_name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [num_to_name[num - 1] for num in reversed_arr]\n    \n    return result"}, "HumanEval/106": {"func": "    import math\n\n    def f(n):\n        result = []\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                result.append(math.factorial(i))\n            else:\n                result.append(sum(range(1, i + 1)))\n        return result"}, "HumanEval/107": {"func": "    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)"}, "HumanEval/108": {"func": "    def count_nums(arr):\n        def sum_of_digits(n):\n            return sum(int(digit) for digit in str(abs(n)))\n        \n        count = 0\n        for num in arr:\n            if sum_of_digits(num) > 0:\n                count += 1\n        return count"}, "HumanEval/109": {"func": "    if not arr:\n        return True\n    \n    n = len(arr)\n    \n    def is_sorted(arr):\n        return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n    \n    if is_sorted(arr):\n        return True\n    \n    for i in range(n):\n        shifted_arr = arr[-i:] + arr[:-i]\n        if is_sorted(shifted_arr):\n            return True\n    \n    return False"}, "HumanEval/110": {"func": "    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}, "HumanEval/111": {"func": "    from collections import Counter\n    \n    # Split the input string into individual letters\n    letters = test.split()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(letters)\n    \n    if not letter_counts:\n        return {}\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    \n    # Collect all letters with the maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result"}, "HumanEval/112": {"func": "    filtered_s = ''.join([char for char in s if char not in c])\n    is_palindrome = filtered_s == filtered_s[::-1]\n    return (filtered_s, is_palindrome)"}, "HumanEval/113": {"func": "    def count_odd_digits(s):\n        return sum(1 for char in s if char in '13579')\n\n    def odd_count(lst):\n        result = []\n        for s in lst:\n            odd_count = count_odd_digits(s)\n            result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n        return result"}, "HumanEval/114": {"func": "    def minSubArraySum(nums):\n        if not nums:\n            return 0\n        \n        current_min = global_min = nums[0]\n        \n        for num in nums[1:]:\n            current_min = min(num, current_min + num)\n            global_min = min(global_min, current_min)\n        \n        return global_min"}, "HumanEval/115": {"func": "    import math\n    \n    total_units_of_water = sum(sum(row) for row in grid)\n    number_of_bucket_uses = math.ceil(total_units_of_water / capacity)\n    \n    return number_of_bucket_uses"}, "HumanEval/116": {"func": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}, "HumanEval/117": {"func": "    def select_words(s, n):\n        vowels = set(\"aeiouAEIOU\")\n        result = []\n        \n        for word in s.split():\n            consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n            if consonant_count == n:\n                result.append(word)\n        \n        return result"}, "HumanEval/118": {"func": "    vowels = set(\"aeiouAEIOU\")\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}, "HumanEval/119": {"func": "    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}, "HumanEval/120": {"func": "    if k == 0:\n        return []\n    return sorted(sorted(arr, reverse=True)[:k])"}, "HumanEval/121": {"func": "    total_sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total_sum += lst[i]\n    return total_sum"}, "HumanEval/122": {"func": "    total_sum = 0\n    for i in range(k):\n        if abs(arr[i]) < 100:\n            total_sum += arr[i]\n    return total_sum"}, "HumanEval/123": {"func": "    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # 1 is always part of the sequence\n    return sorted(odd_numbers)"}, "HumanEval/124": {"func": "    if not date:\n        return False\n\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True"}, "HumanEval/125": {"func": "    def split_words(txt):\n        if ' ' in txt:\n            return txt.split()\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)"}, "HumanEval/126": {"func": "    if len(lst) <= 1:\n        return True\n    \n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] in count_dict:\n            count_dict[lst[i]] += 1\n        else:\n            count_dict[lst[i]] = 1\n    \n    # Check the last element\n    if lst[-1] in count_dict:\n        count_dict[lst[-1]] += 1\n    else:\n        count_dict[lst[-1]] = 1\n    \n    for count in count_dict.values():\n        if count > 2:\n            return False\n    \n    return True"}, "HumanEval/127": {"func": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the intersection\n    start_intersection = max(start1, start2)\n    end_intersection = min(end1, end2)\n    \n    # Check if there is an intersection\n    if start_intersection <= end_intersection:\n        length = end_intersection - start_intersection + 1\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\""}, "HumanEval/128": {"func": "    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n\n        sum_of_magnitudes += abs(num)\n\n    return sum_of_magnitudes * product_of_signs"}, "HumanEval/129": {"func": "import heapq\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def in_bounds(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    # Priority queue to store paths, starting with all single-cell paths\n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(pq, (grid[i][j], [(i, j)]))\n    \n    while pq:\n        current_value, path = heapq.heappop(pq)\n        \n        if len(path) == k:\n            return [grid[x][y] for x, y in path]\n        \n        x, y = path[-1]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if in_bounds(nx, ny):\n                new_path = path + [(nx, ny)]\n                new_value = current_value + grid[nx][ny]\n                heapq.heappush(pq, (new_value, new_path))"}, "HumanEval/130": {"func": "    if n == 0:\n        return [3]\n    \n    sequence = [0] * (n + 1)\n    sequence[0] = 3\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence[i] = 1 + i // 2\n        else:\n            if i == 1:\n                sequence[i] = 2\n            else:\n                sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 <= n else 0\n    \n    return sequence"}, "HumanEval/131": {"func": "    product = 1\n    has_odd = False\n    \n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    \n    return product if has_odd else 0"}, "HumanEval/132": {"func": "    def is_nested(string):\n        stack = []\n        for char in string:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if stack:\n                    stack.pop()\n                    if stack:\n                        return True\n        return False"}, "HumanEval/133": {"func": "    import math\n\n    def sum_squares(lst):\n        return sum(math.ceil(x) ** 2 for x in lst)"}, "HumanEval/134": {"func": "    if not txt:\n        return False\n    \n    txt = txt.rstrip()\n    \n    if not txt or not txt[-1].isalpha():\n        return False\n    \n    if len(txt) > 1 and txt[-2] != ' ':\n        return False\n    \n    return True"}, "HumanEval/135": {"func": "    def can_arrange(arr):\n        index = -1\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                index = i\n        return index"}, "HumanEval/136": {"func": "    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)"}, "HumanEval/137": {"func": "    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    \n    if isinstance(a, str) or isinstance(b, str):\n        a_float = convert_to_float(a)\n        b_float = convert_to_float(b)\n        if a_float == b_float:\n            return None\n        return a if a_float > b_float else b\n    else:\n        if a == b:\n            return None\n        return a if a > b else b"}, "HumanEval/138": {"func": "    if n < 20:\n        return False\n    return n % 2 == 0"}, "HumanEval/139": {"func": "    import math\n\n    def special_factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result"}, "HumanEval/140": {"func": "    def fix_spaces(text):\n        result = []\n        space_count = 0\n        \n        for char in text:\n            if char == ' ':\n                space_count += 1\n            else:\n                if space_count == 1:\n                    result.append('_')\n                elif space_count > 1:\n                    result.append('-')\n                result.append(char)\n                space_count = 0\n        \n        if space_count == 1:\n            result.append('_')\n        elif space_count > 1:\n            result.append('-')\n        \n        return ''.join(result)"}, "HumanEval/141": {"func": "    import re\n\n    def file_name_check(file_name):\n        # Check if there is exactly one dot\n        if file_name.count('.') != 1:\n            return 'No'\n        \n        # Split the file name into two parts\n        name, extension = file_name.split('.')\n        \n        # Check if the extension is valid\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n        \n        # Check if the name part is not empty and starts with a letter\n        if not name or not name[0].isalpha():\n            return 'No'\n        \n        # Check if the name part contains more than three digits\n        if len(re.findall(r'\\d', name)) > 3:\n            return 'No'\n        \n        return 'Yes'"}, "HumanEval/142": {"func": "    return sum(\n        x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x\n        for i, x in enumerate(lst)\n    )"}, "HumanEval/143": {"func": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}, "HumanEval/144": {"func": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    return product_num % product_den == 0"}, "HumanEval/145": {"func": "    def order_by_points(nums):\n        def sum_of_digits(n):\n            return sum(int(digit) for digit in str(abs(n)))\n        \n        return sorted(nums, key=sum_of_digits)"}, "HumanEval/146": {"func": "    def is_odd(digit):\n        return digit in {1, 3, 5, 7, 9}\n\n    def first_and_last_digits(num):\n        num_str = str(abs(num))\n        return int(num_str[0]), int(num_str[-1])\n\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit, last_digit = first_and_last_digits(num)\n            if is_odd(first_digit) and is_odd(last_digit):\n                count += 1\n    return count"}, "HumanEval/147": {"func": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}, "HumanEval/148": {"func": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])"}, "HumanEval/149": {"func": "    def sorted_list_sum(lst):\n        # Filter out strings with odd lengths\n        filtered_lst = [s for s in lst if len(s) % 2 == 0]\n        \n        # Sort the list by length and then alphabetically\n        sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n        \n        return sorted_lst"}, "HumanEval/150": {"func": "    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y"}, "HumanEval/151": {"func": "    def double_the_difference(lst):\n        sum_of_squares = 0\n        for num in lst:\n            if isinstance(num, int) and num > 0 and num % 2 != 0:\n                sum_of_squares += num ** 2\n        return sum_of_squares"}, "HumanEval/152": {"func": "    result = []\n    \n    for i in range(len(game)):\n        difference = abs(game[i] - guess[i])\n        result.append(difference)\n    \n    return result"}, "HumanEval/153": {"func": "    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}, "HumanEval/154": {"func": "    def cycpattern_check(a, b):\n        if not b:\n            return True\n        n = len(b)\n        for i in range(n):\n            rotation = b[i:] + b[:i]\n            if rotation in a:\n                return True\n        return False"}, "HumanEval/155": {"func": "    def even_odd_count(num):\n        num = abs(num)\n        num_str = str(num)\n        even_count = 0\n        odd_count = 0\n        \n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        return (even_count, odd_count)"}, "HumanEval/156": {"func": "    roman_numerals = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    result = []\n    for value, symbol in roman_numerals:\n        while number >= value:\n            result.append(symbol)\n            number -= value\n    \n    return ''.join(result).lower()"}, "HumanEval/157": {"func": "    a, b, c = sorted([a, b, c])\n    return a**2 + b**2 == c**2"}, "HumanEval/158": {"func": "    if not words:\n        return \"\"\n    \n    max_word = \"\"\n    max_unique_count = 0\n    \n    for word in words:\n        unique_count = len(set(word))\n        \n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        elif unique_count == max_unique_count:\n            if word < max_word:\n                max_word = word\n    \n    return max_word"}, "HumanEval/159": {"func": "    total_eaten = number + need\n    if remaining >= need:\n        remaining -= need\n    else:\n        remaining = 0\n    return [total_eaten, remaining]"}, "HumanEval/160": {"func": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i + 1]}\"\n    return eval(expression)"}, "HumanEval/161": {"func": "    if any(c.isalpha() for c in s):\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]"}, "HumanEval/162": {"func": "    import hashlib\n\n    def string_to_md5(text):\n        if text == \"\":\n            return None\n        md5_hash = hashlib.md5(text.encode())\n        return md5_hash.hexdigest()"}, "HumanEval/163": {"func": "    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end + 1) if i % 2 == 0]"}}