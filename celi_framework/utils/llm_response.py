from typing import Literal, Optional, List

from pydantic import BaseModel


class FunctionCall(BaseModel):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class ToolCall(BaseModel):
    id: str
    """The ID of the tool call."""

    function: FunctionCall
    """The function that the model called."""

    type: Literal["function"]
    """The type of the tool. Currently, only `function` is supported."""


class LLMResponse(BaseModel):
    content: Optional[str]
    finish_reason: Literal["stop", "length", "tool_calls", "content_filter"]
    tool_calls: Optional[List[ToolCall]]
