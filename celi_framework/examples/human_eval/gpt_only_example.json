{"HumanEval/0": {"func": "    if len(numbers) < 2:\n        return False\n    \n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    return False"}, "HumanEval/1": {"func": "    def separate_paren_groups(paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")\n        result = []\n        temp = \"\"\n        balance = 0\n        \n        for char in paren_string:\n            temp += char\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            \n            if balance == 0 and temp:\n                result.append(temp)\n                temp = \"\"\n        \n        return result"}, "HumanEval/2": {"func": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}, "HumanEval/3": {"func": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}, "HumanEval/4": {"func": "    mean_value = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"}, "HumanEval/5": {"func": "    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result"}, "HumanEval/6": {"func": "    def parse_nested_parens(paren_string: str) -> List[int]:\n        if not paren_string:\n            return []\n        \n        groups = paren_string.split()\n        result = []\n        \n        for group in groups:\n            current_depth = 0\n            max_depth = 0\n            for char in group:\n                if char == '(':\n                    current_depth += 1\n                    if current_depth > max_depth:\n                        max_depth = current_depth\n                elif char == ')':\n                    current_depth -= 1\n            result.append(max_depth)\n        \n        return result"}, "HumanEval/7": {"func": "    return [string for string in strings if substring in string]"}, "HumanEval/8": {"func": "    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    \n    return total_sum, total_product"}, "HumanEval/9": {"func": "    result = []\n    if not numbers:\n        return result\n    \n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    \n    return result"}, "HumanEval/10": {"func": "    if not string:\n        return string\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[::-1]"}, "HumanEval/11": {"func": "    result = []\n    for char_a, char_b in zip(a, b):\n        result.append(str(int(char_a) ^ int(char_b)))\n    return ''.join(result)"}, "HumanEval/12": {"func": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}, "HumanEval/13": {"func": "    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}, "HumanEval/14": {"func": "    return [string[:i] for i in range(1, len(string) + 1)]"}, "HumanEval/15": {"func": "    return ' '.join(map(str, range(n + 1)))"}, "HumanEval/16": {"func": "    return len(set(string.lower()))"}, "HumanEval/17": {"func": "    def parse_music(music_string: str) -> List[int]:\n        note_to_beats = {\n            'o': 4,\n            'o|': 2,\n            '.|': 1\n        }\n        \n        if not music_string:\n            return []\n        \n        notes = music_string.split()\n        beats = [note_to_beats[note] for note in notes]\n        \n        return beats"}, "HumanEval/18": {"func": "    if not substring:\n        return 0\n    \n    count = 0\n    start = 0\n    \n    while start <= len(string) - len(substring):\n        if string[start:start + len(substring)] == substring:\n            count += 1\n        start += 1\n    \n    return count"}, "HumanEval/19": {"func": "    def sort_numbers(numbers: str) -> str:\n        num_map = {\n            'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n            'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n        }\n        reverse_num_map = {v: k for k, v in num_map.items()}\n        \n        if not numbers:\n            return ''\n        \n        num_list = numbers.split()\n        num_list = [num_map[num] for num in num_list]\n        num_list.sort()\n        sorted_numbers = [reverse_num_map[num] for num in num_list]\n        \n        return ' '.join(sorted_numbers)"}, "HumanEval/20": {"func": "    sorted_numbers = sorted(numbers)\n    \n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    \n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair"}, "HumanEval/21": {"func": "    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    \n    if range_value == 0:\n        return [0.0] * len(numbers)\n    \n    return [(num - min_value) / range_value for num in numbers]"}, "HumanEval/22": {"func": "    return [value for value in values if isinstance(value, int)]"}, "HumanEval/23": {"func": "    return len(string)"}, "HumanEval/24": {"func": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i"}, "HumanEval/25": {"func": "    def factorize(n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while n > 1:\n            while n % divisor == 0:\n                factors.append(divisor)\n                n //= divisor\n            divisor += 1\n        return factors"}, "HumanEval/26": {"func": "    # Step 1: Count occurrences of each element\n    count = {}\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Step 2: Filter elements that occur exactly once\n    result = [num for num in numbers if count[num] == 1]\n    \n    return result"}, "HumanEval/27": {"func": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}, "HumanEval/28": {"func": "    return ''.join(strings)"}, "HumanEval/29": {"func": "    return [string for string in strings if string.startswith(prefix)]"}, "HumanEval/30": {"func": "    return [num for num in l if num > 0]"}, "HumanEval/33": {"func": "    indices = [i for i in range(len(l)) if i % 3 == 0]\n    elements = [l[i] for i in indices]\n    elements.sort()\n    for i, index in enumerate(indices):\n        l[index] = elements[i]\n    return l"}, "HumanEval/34": {"func": "    return sorted(set(l))"}, "HumanEval/35": {"func": "    if not l:\n        raise ValueError(\"The list is empty\")\n    max_val = l[0]\n    for elem in l[1:]:\n        if elem > max_val:\n            max_val = elem\n    return max_val"}, "HumanEval/36": {"func": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}, "HumanEval/37": {"func": "    # Extract elements at even indices\n    even_elements = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the even elements\n    even_elements.sort()\n    \n    # Place the sorted elements back into their original even indices\n    sorted_list = l[:]\n    for i, val in zip(range(0, len(l), 2), even_elements):\n        sorted_list[i] = val\n    \n    return sorted_list"}, "HumanEval/38": {"func": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}, "HumanEval/39": {"func": "    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def prime_fib(n: int):\n        if n <= 0:\n            return None  # Handle edge case where n is 0 or negative\n        \n        fib1, fib2 = 1, 1\n        count = 0\n        \n        while True:\n            fib = fib1 + fib2\n            fib1, fib2 = fib2, fib\n            \n            if is_prime(fib):\n                count += 1\n                if count == n:\n                    return fib"}, "HumanEval/40": {"func": "    n = len(l)\n    if n < 3:\n        return False\n    \n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            required = -(l[i] + l[j])\n            if required in l[j + 1:]:\n                return True\n    \n    return False"}, "HumanEval/41": {"func": "    return n"}, "HumanEval/42": {"func": "    return [x + 1 for x in l]"}, "HumanEval/43": {"func": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}, "HumanEval/44": {"func": "    if x == 0:\n        return \"0\"\n    \n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result"}, "HumanEval/45": {"func": "    return 0.5 * a * h"}, "HumanEval/46": {"func": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib4_sequence = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_value = fib4_sequence[-1] + fib4_sequence[-2] + fib4_sequence[-3] + fib4_sequence[-4]\n        fib4_sequence.append(next_value)\n\n    return fib4_sequence[n]"}, "HumanEval/47": {"func": "    if not l:\n        return None  # or raise an error\n    \n    l.sort()\n    n = len(l)\n    mid = n // 2\n    \n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2"}, "HumanEval/48": {"func": "    import re\n\n    def is_palindrome(text: str):\n        normalized_text = re.sub(r'[^A-Za-z0-9]', '', text).lower()\n        return normalized_text == normalized_text[::-1]"}, "HumanEval/49": {"func": "    return pow(2, n, p)"}, "HumanEval/50": {"func": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}, "HumanEval/51": {"func": "    def remove_vowels(text):\n        vowels = set('aeiouAEIOU')\n        return ''.join([char for char in text if char not in vowels])"}, "HumanEval/52": {"func": "    for num in l:\n        if num >= t:\n            return False\n    return True"}, "HumanEval/53": {"func": "    return x + y"}, "HumanEval/54": {"func": "    def same_chars(s0: str, s1: str):\n        return set(s0) == set(s1)"}, "HumanEval/55": {"func": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}, "HumanEval/56": {"func": "    def correct_bracketing(brackets: str):\n        counter = 0\n        for char in brackets:\n            if char == \"<\":\n                counter += 1\n            elif char == \">\":\n                counter -= 1\n                if counter < 0:\n                    return False\n        return counter == 0"}, "HumanEval/57": {"func": "    if len(l) <= 1:\n        return True\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}, "HumanEval/58": {"func": "    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1 & set2\n    return sorted(common_elements)"}, "HumanEval/59": {"func": "    def largest_prime_factor(n: int):\n        # Step 1: Handle the smallest prime factor 2\n        largest_factor = 1\n        while n % 2 == 0:\n            largest_factor = 2\n            n //= 2\n        \n        # Step 2: Handle odd factors from 3 onwards\n        factor = 3\n        while factor * factor <= n:\n            while n % factor == 0:\n                largest_factor = factor\n                n //= factor\n            factor += 2\n        \n        # Step 3: If n is still greater than 2, then it is a prime factor\n        if n > 2:\n            largest_factor = n\n        \n        return largest_factor"}, "HumanEval/60": {"func": "    return n * (n + 1) // 2"}, "HumanEval/61": {"func": "    def correct_bracketing(brackets: str):\n        counter = 0\n        for char in brackets:\n            if char == '(':\n                counter += 1\n            elif char == ')':\n                counter -= 1\n            if counter < 0:\n                return False\n        return counter == 0"}, "HumanEval/62": {"func": "    return [i * xs[i] for i in range(1, len(xs))]"}, "HumanEval/63": {"func": "    def fibfib(n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        \n        fibfib_seq = [0, 0, 1]\n        \n        for i in range(3, n + 1):\n            next_value = fibfib_seq[-1] + fibfib_seq[-2] + fibfib_seq[-3]\n            fibfib_seq.append(next_value)\n        \n        return fibfib_seq[n]"}, "HumanEval/64": {"func": "    def vowels_count(s):\n        s = s.lower()\n        vowels = set('aeiou')\n        count = 0\n        for i, char in enumerate(s):\n            if char in vowels:\n                count += 1\n            elif char == 'y' and i == len(s) - 1:\n                count += 1\n        return count"}, "HumanEval/65": {"func": "    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift >= num_digits:\n        return x_str[::-1]\n    \n    effective_shift = shift % num_digits\n    return x_str[-effective_shift:] + x_str[:-effective_shift]"}, "HumanEval/66": {"func": "    def digitSum(s):\n        total = 0\n        for char in s:\n            if char.isupper():\n                total += ord(char)\n        return total"}, "HumanEval/67": {"func": "    import re\n    \n    numbers = re.findall(r'\\d+', s)\n    \n    apples = int(numbers[0])\n    oranges = int(numbers[1])\n    \n    mangoes = n - apples - oranges\n    \n    return mangoes"}, "HumanEval/68": {"func": "    min_even_value = None\n    min_index = None\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if min_even_value is None or value < min_even_value:\n                min_even_value = value\n                min_index = index\n    \n    if min_even_value is not None:\n        return [min_even_value, min_index]\n    else:\n        return []"}, "HumanEval/69": {"func": "    from collections import Counter\n\n    def search(lst):\n        freq = Counter(lst)\n        max_valid = -1\n        for num, count in freq.items():\n            if count >= num:\n                max_valid = max(max_valid, num)\n        return max_valid"}, "HumanEval/70": {"func": "    if not lst:\n        return []\n\n    lst.sort()\n    result = []\n    left, right = 0, len(lst) - 1\n\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n\n    return result"}, "HumanEval/71": {"func": "    import math\n    \n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal points\n    return round(area, 2)"}, "HumanEval/72": {"func": "    def will_it_fly(q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        \n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) > w:\n            return False\n        \n        return True"}, "HumanEval/73": {"func": "    left = 0\n    right = len(arr) - 1\n    changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes"}, "HumanEval/74": {"func": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1"}, "HumanEval/75": {"func": "    # List of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}, "HumanEval/76": {"func": "    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if n == 0:\n        return x == 0\n\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}, "HumanEval/77": {"func": "    if a == 0:\n        return True\n    abs_a = abs(a)\n    n = 0\n    while n**3 <= abs_a:\n        if n**3 == abs_a or (-n)**3 == abs_a:\n            return True\n        n += 1\n    return False"}, "HumanEval/78": {"func": "    def hex_key(num):\n        prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n        count = 0\n        for char in num:\n            if char in prime_hex_digits:\n                count += 1\n        return count"}, "HumanEval/79": {"func": "    binary_str = bin(decimal)[2:]\n    return f\"db{binary_str}db\""}, "HumanEval/80": {"func": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}, "HumanEval/81": {"func": "    def numerical_letter_grade(grades):\n        letter_grades = []\n        for gpa in grades:\n            if gpa == 4.0:\n                letter_grades.append('A+')\n            elif gpa > 3.7:\n                letter_grades.append('A')\n            elif gpa > 3.3:\n                letter_grades.append('A-')\n            elif gpa > 3.0:\n                letter_grades.append('B+')\n            elif gpa > 2.7:\n                letter_grades.append('B')\n            elif gpa > 2.3:\n                letter_grades.append('B-')\n            elif gpa > 2.0:\n                letter_grades.append('C+')\n            elif gpa > 1.7:\n                letter_grades.append('C')\n            elif gpa > 1.3:\n                letter_grades.append('C-')\n            elif gpa > 1.0:\n                letter_grades.append('D+')\n            elif gpa > 0.7:\n                letter_grades.append('D')\n            elif gpa > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades"}, "HumanEval/82": {"func": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    length = len(string)\n    return is_prime(length)"}, "HumanEval/83": {"func": "    if n == 1:\n        return 2  # The numbers are 1 and 11\n\n    count_start_with_1 = 10**(n-1) - 10**(n-2)\n    count_end_with_1 = 10**(n-1)\n    count_both_start_and_end_with_1 = 1\n\n    return count_start_with_1 + count_end_with_1 - count_both_start_and_end_with_1"}, "HumanEval/84": {"func": "    digit_sum = sum(int(digit) for digit in str(N))\n    return bin(digit_sum)[2:]"}, "HumanEval/85": {"func": "    def add(lst):\n        total = 0\n        for i in range(1, len(lst), 2):\n            if lst[i] % 2 == 0:\n                total += lst[i]\n        return total"}, "HumanEval/86": {"func": "    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)"}, "HumanEval/87": {"func": "    coordinates = []\n    \n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    # Sort by row in ascending order, and by column in descending order within each row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates"}, "HumanEval/88": {"func": "    if not array or len(array) == 1:\n        return array\n    \n    sum_first_last = array[0] + array[-1]\n    \n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}, "HumanEval/89": {"func": "    def encrypt(s):\n        def rotate_char(c):\n            if 'a' <= c <= 'z':\n                return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n            return c\n        \n        return ''.join(rotate_char(c) for c in s)"}, "HumanEval/90": {"func": "    if len(lst) < 2:\n        return None\n    \n    unique_elements = sorted(set(lst))\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    return unique_elements[1]"}, "HumanEval/91": {"func": "    import re\n\n    sentences = re.split(r'[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count"}, "HumanEval/92": {"func": "    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x + y == z or x + z == y or y + z == x"}, "HumanEval/93": {"func": "    def encode(message):\n        vowel_replacement = {\n            'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n            'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n        }\n        \n        # Swap case of all letters\n        swapped_message = message.swapcase()\n        \n        # Replace vowels\n        encoded_message = ''.join(vowel_replacement.get(char, char) for char in swapped_message)\n        \n        return encoded_message"}, "HumanEval/94": {"func": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)"}, "HumanEval/95": {"func": "    if not dict:\n        return False\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    \n    return all_lower or all_upper"}, "HumanEval/96": {"func": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes"}, "HumanEval/97": {"func": "    def multiply(a, b):\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        return unit_digit_a * unit_digit_b"}, "HumanEval/98": {"func": "    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}, "HumanEval/99": {"func": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}, "HumanEval/100": {"func": "    def make_a_pile(n):\n        stones = []\n        current_stones = n\n        for _ in range(n):\n            stones.append(current_stones)\n            if current_stones % 2 == 0:\n                current_stones += 2\n            else:\n                current_stones += 2\n        return stones"}, "HumanEval/101": {"func": "    import re\n\n    def words_string(s):\n        # Split the string based on spaces and commas\n        words = re.split(r'[ ,]+', s)\n        # Filter out any empty strings\n        words = [word for word in words if word]\n        return words"}, "HumanEval/102": {"func": "    if x > y:\n        return -1\n\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    return -1"}, "HumanEval/103": {"func": "    if n > m:\n        return -1\n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    avg = total_sum / count\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}, "HumanEval/104": {"func": "    def unique_digits(x):\n        result = []\n        for num in x:\n            num_str = str(num)\n            if all(digit not in '02468' for digit in num_str):\n                result.append(num)\n        return sorted(result)"}, "HumanEval/105": {"func": "    # Dictionary to map integers to their corresponding names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter the array to include only integers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each integer with its corresponding name\n    result = [num_to_name[num] for num in reversed_arr]\n    \n    return result"}, "HumanEval/106": {"func": "    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n\n    def sum_to(x):\n        return x * (x + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to(i))\n    return result"}, "HumanEval/107": {"func": "    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)"}, "HumanEval/108": {"func": "    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        n_str = str(n)\n        if n_str[0] == '-':\n            return int(n_str[0] + n_str[1]) + sum(int(digit) for digit in n_str[2:])\n        else:\n            return sum(int(digit) for digit in n_str)\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}, "HumanEval/109": {"func": "    if not arr:\n        return True\n    \n    n = len(arr)\n    \n    # Check if the array is already sorted\n    if is_sorted(arr):\n        return True\n    \n    # Try all possible right shifts\n    for i in range(n):\n        shifted_arr = arr[-i:] + arr[:-i]\n        if is_sorted(shifted_arr):\n            return True\n    \n    return False"}, "HumanEval/110": {"func": "    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}, "HumanEval/111": {"func": "    from collections import Counter\n\n    def histogram(test):\n        if not test:\n            return {}\n        \n        # Split the string into characters\n        chars = test.split()\n        \n        # Count the occurrences of each character\n        counts = Counter(chars)\n        \n        # Find the maximum count\n        max_count = max(counts.values())\n        \n        # Collect characters with the maximum count\n        result = {char: count for char, count in counts.items() if count == max_count}\n        \n        return result"}, "HumanEval/112": {"func": "    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}, "HumanEval/113": {"func": "    def count_odd_digits(s):\n        return sum(1 for char in s if char in '13579')\n\n    result = []\n    for s in lst:\n        odd_count = count_odd_digits(s)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}, "HumanEval/114": {"func": "    def minSubArraySum(nums):\n        current_min = global_min = nums[0]\n        for num in nums[1:]:\n            current_min = min(num, current_min + num)\n            global_min = min(global_min, current_min)\n        return global_min"}, "HumanEval/116": {"func": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}, "HumanEval/117": {"func": "    vowels = set(\"aeiouAEIOU\")\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}, "HumanEval/118": {"func": "    vowels = set(\"aeiouAEIOU\")\n    n = len(word)\n    \n    for i in range(n - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    \n    return \"\""}, "HumanEval/119": {"func": "    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'"}, "HumanEval/120": {"func": "    import heapq\n    if k == 0:\n        return []\n    k_largest = heapq.nlargest(k, arr)\n    return sorted(k_largest)"}, "HumanEval/121": {"func": "    total_sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total_sum += lst[i]\n    return total_sum"}, "HumanEval/122": {"func": "    total_sum = 0\n    for i in range(k):\n        if abs(arr[i]) < 100:\n            total_sum += arr[i]\n    return total_sum"}, "HumanEval/123": {"func": "    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)"}, "HumanEval/124": {"func": "    if not date:\n        return False\n    \n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True"}, "HumanEval/125": {"func": "    def split_words(txt):\n        if any(c.isspace() for c in txt):\n            return txt.split()\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            odd_order_count = sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 0)\n            return odd_order_count"}, "HumanEval/126": {"func": "    if len(lst) <= 1:\n        return True\n    \n    count = {}\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] in count:\n            count[lst[i]] += 1\n        else:\n            count[lst[i]] = 1\n        if count[lst[i]] > 2:\n            return False\n    \n    # Check the last element\n    if lst[-1] in count:\n        count[lst[-1]] += 1\n    else:\n        count[lst[-1]] = 1\n    if count[lst[-1]] > 2:\n        return False\n    \n    return True"}, "HumanEval/127": {"func": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    \n    if intersect_start <= intersect_end:\n        intersection_length = intersect_end - intersect_start + 1\n        if is_prime(intersection_length):\n            return \"YES\"\n    return \"NO\""}, "HumanEval/128": {"func": "    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        \n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n    \n    return sum_of_magnitudes * product_of_signs"}, "HumanEval/129": {"func": "    from heapq import heappop, heappush\n    from collections import deque\n    \n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def in_bounds(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    min_path = None\n    \n    for i in range(N):\n        for j in range(N):\n            pq = [(grid[i][j], i, j, [grid[i][j]])]\n            while pq:\n                value, x, y, path = heappop(pq)\n                if len(path) == k:\n                    if min_path is None or path < min_path:\n                        min_path = path\n                    continue\n                for dx, dy in directions:\n                    nx, ny = x + dx, y + dy\n                    if in_bounds(nx, ny):\n                        heappush(pq, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n    \n    return min_path"}, "HumanEval/130": {"func": "    if n == 0:\n        return [3]\n    \n    sequence = [0] * (n + 1)\n    sequence[1] = 3\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence[i] = 1 + i // 2\n        else:\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 <= n else 0\n    \n    return sequence"}, "HumanEval/131": {"func": "    product = 1\n    has_odd = False\n    \n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n    \n    return product if has_odd else 0"}, "HumanEval/132": {"func": "    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n        if depth > 1:\n            return True\n    return False"}, "HumanEval/133": {"func": "    import math\n\n    return sum(math.ceil(x) ** 2 for x in lst)"}, "HumanEval/134": {"func": "    if not txt:\n        return False\n    \n    txt = txt.rstrip()\n    \n    if not txt or not txt[-1].isalpha():\n        return False\n    \n    if len(txt) > 1 and txt[-2] != ' ':\n        return False\n    \n    return True"}, "HumanEval/135": {"func": "    def can_arrange(arr):\n        index = -1\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                index = i\n        return index"}, "HumanEval/136": {"func": "    def largest_smallest_integers(lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0:\n                if largest_negative is None or num > largest_negative:\n                    largest_negative = num\n            elif num > 0:\n                if smallest_positive is None or num < smallest_positive:\n                    smallest_positive = num\n\n        return (largest_negative, smallest_positive)"}, "HumanEval/137": {"func": "    def compare_one(a, b):\n        def convert_to_float(value):\n            if isinstance(value, str):\n                value = value.replace(',', '.')\n                return float(value)\n            return value\n        \n        a_float = convert_to_float(a)\n        b_float = convert_to_float(b)\n        \n        if a_float == b_float:\n            return None\n        return a if a_float > b_float else b"}, "HumanEval/138": {"func": "    if n < 8 or n % 2 != 0:\n        return False\n    return True"}, "HumanEval/139": {"func": "    import math\n\n    def special_factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result"}, "HumanEval/140": {"func": "    def fix_spaces(text):\n        result = []\n        space_count = 0\n        \n        for char in text:\n            if char == ' ':\n                space_count += 1\n            else:\n                if space_count == 1:\n                    result.append('_')\n                elif space_count > 2:\n                    result.append('-')\n                elif space_count == 2:\n                    result.append('_' * 2)\n                result.append(char)\n                space_count = 0\n        \n        if space_count == 1:\n            result.append('_')\n        elif space_count > 2:\n            result.append('-')\n        elif space_count == 2:\n            result.append('_' * 2)\n        \n        return ''.join(result)"}, "HumanEval/141": {"func": "    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}, "HumanEval/142": {"func": "    def sum_squares(lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total"}, "HumanEval/143": {"func": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}, "HumanEval/144": {"func": "    # Parse the fractions\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Multiply the fractions\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    # Check if the result is a whole number\n    return result_num % result_den == 0"}, "HumanEval/145": {"func": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=sum_of_digits)"}, "HumanEval/146": {"func": "    def specialFilter(nums):\n        count = 0\n        for num in nums:\n            if num > 10:\n                abs_num_str = str(abs(num))\n                first_digit = int(abs_num_str[0])\n                last_digit = int(abs_num_str[-1])\n                if first_digit % 2 != 0 and last_digit % 2 != 0:\n                    count += 1\n        return count"}, "HumanEval/147": {"func": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}, "HumanEval/148": {"func": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])"}, "HumanEval/149": {"func": "    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst"}, "HumanEval/150": {"func": "    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y"}, "HumanEval/151": {"func": "    def double_the_difference(lst):\n        sum_of_squares = 0\n        for num in lst:\n            if isinstance(num, int) and num > 0 and num % 2 != 0:\n                sum_of_squares += num ** 2\n        return sum_of_squares"}, "HumanEval/152": {"func": "    result = []\n    for g, s in zip(game, guess):\n        if g == s:\n            result.append(0)\n        else:\n            result.append(abs(g - s))\n    return result"}, "HumanEval/153": {"func": "    if not extensions:\n        return ''\n    \n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    \n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    \n    return f\"{class_name}.{strongest_extension}\""}, "HumanEval/154": {"func": "    n = len(b)\n    for i in range(n):\n        rotation = b[i:] + b[:i]\n        if rotation in a:\n            return True\n    return False"}, "HumanEval/155": {"func": "    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)"}, "HumanEval/156": {"func": "    def int_to_mini_roman(number):\n        roman_numerals = [\n            ('M', 1000),\n            ('CM', 900),\n            ('D', 500),\n            ('CD', 400),\n            ('C', 100),\n            ('XC', 90),\n            ('L', 50),\n            ('XL', 40),\n            ('X', 10),\n            ('IX', 9),\n            ('V', 5),\n            ('IV', 4),\n            ('I', 1)\n        ]\n        \n        result = []\n        for symbol, value in roman_numerals:\n            while number >= value:\n                result.append(symbol)\n                number -= value\n        \n        return ''.join(result).lower()"}, "HumanEval/157": {"func": "    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}, "HumanEval/158": {"func": "    max_unique_chars = -1\n    result_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result_word):\n            max_unique_chars = unique_chars\n            result_word = word\n    \n    return result_word"}, "HumanEval/159": {"func": "    total_eaten = number + need\n    if need <= remaining:\n        remaining -= need\n    else:\n        remaining = 0\n    return [total_eaten, remaining]"}, "HumanEval/160": {"func": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    \n    result = eval(expression)\n    return result"}, "HumanEval/161": {"func": "    if any(c.isalpha() for c in s):\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]"}, "HumanEval/162": {"func": "    import hashlib\n\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()"}, "HumanEval/163": {"func": "    def generate_integers(a, b):\n        start = min(a, b)\n        end = max(a, b)\n        return [i for i in range(start, end + 1) if i % 2 == 0]"}}